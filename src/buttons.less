@import "variables.less";
@import "mixins.less";

.btn-color(@bg) {
	color: @btn-color;
	
	&:hover {
		background: darken(@bg, @btn-hovering);
		border-color: darken(@bg, @btn-hovering);
	}
	
	&,
	&:active,
	&.active {
		background: @bg;
		border-color: darken(@bg, 5%);
	}

	&:focus {
		box-shadow: 0 0 5px 0 @bg;
	}
}

.btn-outline-color(@color) {
	color: @color;
	border-color: @color;
	
	&:hover {
		color: @btn-color;
		background: @color;
	}
}

.btn-invert-color(@color) {
	&:hover {
		background: @color;
	}
}

.btn {
	display: inline-block;
	vertical-align: baseline;

	font-family: @control-font-family;
	font-weight: @btn-font-weight;
	line-height: @line-height;
    text-align: center;
	text-decoration: none;
	
	-webkit-appearance: none;
	outline: none;
	box-shadow: none;
	cursor: pointer;
	
	border-width: @btn-border-width;
	border-style: @btn-border-style;
	border-radius: @btn-border-radius;
	padding: @btn-padding;
	.transition(@btn-transition);

	&::-moz-focus-inner {
		border: 0;
		padding: 0;
	}
	
	&[disabled],
	&.disabled {
		cursor: @control-disabled-cursor;
		box-shadow: none;
		color: @control-disabled-color !important;
		background: @control-disabled-bg !important;
	}
	
	&:active,
	&.active {
		box-shadow: 0 1px 3px rgba(0, 0, 0, .4) inset;
	}
}

// Normal btn
.btn {
	.btn-color(@btn-bg);
		
	&.primary {
		.btn-color(@color-primary);
	}
	
	&.secondary {
		.btn-color(@color-secondary);
	}
	
	&.success {
		.btn-color(@color-success);
	}
	
	&.warning {
		.btn-color(@color-warning);
	}
	
	&.error {
		.btn-color(@color-error);
	}
	
	&.link {
		color: @link-color;
		background: none !important;
		border-color: transparent !important;
		text-decoration: underline;
		
		&:hover {
			color: @link-hover-color;
			text-decoration: none;
		}
	}
}

// Outline and inverted button
.btn.outline,
.btn.invert {
	&,
	&:active,
	&.active {
		background: none;
	}

	&[disabled],
	&.disabled {
		background: none !important;
		box-shadow: none;
	}
}

.btn.outline {
	.btn-outline-color(@color-text);
	
	&.primary {
		.btn-outline-color(@color-primary);
	}
	
	&.secondary {
		.btn-outline-color(@color-secondary);
	}
	
	&.success {
		.btn-outline-color(@color-success);
	}
	
	&.warning {
		.btn-outline-color(@color-warning);
	}
	
	&.error {
		.btn-outline-color(@color-error);
	}
}
	
.btn.invert {
	color: @color-invert;
	border-color: @color-invert !important;
	.btn-invert-color(@btn-bg);
	
	&.primary {
		.btn-invert-color(@color-primary);
	}
	
	&.secondary {
		.btn-invert-color(@color-secondary);
	}
	
	&.success {
		.btn-invert-color(@color-success);
	}
	
	&.warning {
		.btn-invert-color(@color-warning);
	}
	
	&.error {
		.btn-invert-color(@color-error);
	}
}

// Button groups
.btn-group {
	.clearfix();
	
	> * {
		&:extend(.btn all);
		float: left;
		
		&:not(:first-child) {
			.border-left-radius(0);
			margin-left: -@btn-border-width;
		}
		
		&:not(:last-child) {
			.border-right-radius(0);
		}
	}
	
	&.primary {
		> * {
			&:extend(.btn.primary all);
		}
	}
	
	&.secondary {
		> * {
			&:extend(.btn.secondary all);
		}
	}
	
	&.success {
		> * {
			&:extend(.btn.success all);
		}
	}
	
	&.warning {
		> * {
			&:extend(.btn.warning all);
		}
	}
	
	&.error {
		> * {
			&:extend(.btn.error all);
		}
	}
	
	&.outline {
		> .btn {
			&:extend(.btn.outline all);
		}
		
		&.primary {
			> .btn {
				&:extend(.btn.outline.primary all);
			}
		}
		
		&.secondary {
			> .btn {
				&:extend(.btn.outline.secondary all);
			}
		}
		
		&.success {
			> .btn {
				&:extend(.btn.outline.success all);
			}
		}
		
		&.warning {
			> .btn {
				&:extend(.btn.outline.warning all);
			}
		}
		
		&.error {
			> .btn {
				&:extend(.btn.outline.error all);
			}
		}
	}
}

// Default buttons
[type="submit"] {
	&:extend(.btn all);
	&:extend(.btn.primary all);
}

[type="submit"].invert {
	&:extend(.btn.invert.primary all);
}

[type="button"],
[type="reset"],
button:not([type]) {
	&:extend(.btn all);
}