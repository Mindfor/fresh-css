@import "variables.less";
@import "grid.less";

// Mixins
.blocks-container() {
	.row;
	list-style: none;
	padding: 0;
	
	> * {
		text-align: center;
	}
}

.blocks-count(@num, @spacing) {
	margin-left: -@spacing;
	
	> * {
		width: calc(percentage(1 / @num) ~" - " @spacing);
		margin-left: @spacing;
		margin-bottom: @spacing;
	}
}

.blocks(@num) {
	.blocks-container();
	.blocks-count(@num, @padding-phone);
	
	@media (min-width: @width-tablet) {
		.blocks-count(@num, @padding-tablet);
	}
	
	@media (min-width: @width-desktop) {
		.blocks-count(@num, @padding-desktop);
	}

	@media (min-width: @width-hd) {
		.blocks-count(@num, @padding-hd);
	}
}

.blocks(@num, @spacing) {
	.blocks-container();
	.blocks-count(@num, @spacing);
}

.blocks-tablet(@num) {
	@media (min-width: @width-tablet) {
		.blocks(@num, @padding-tablet);
	}
}

.blocks-desktop(@num) {
	@media (min-width: @width-desktop) {
		.blocks(@num, @padding-desktop);
	}
}

.blocks-hd(@num) {
	@media (min-width: @width-hd) {
		.blocks(@num, @padding-hd);
	}
}

// Create default blocks in loop
.blocks-loop(@num) when (@num <= @blocks-count) {
	.blocks-@{num} {
		.blocks(@num);
	}
	.blocks-loop(@num + 1);
}

.blocks-loop(@num, @suffix, @min-width, @spacing) when (@num <= @blocks-count) {
	.blocks-@{suffix}-@{num} {
		@media (min-width: @min-width) {
			.blocks(@num, @spacing);
		}
	}
	.blocks-loop(@num + 1, @suffix, @min-width, @spacing);
}

.blocks-loop(1);
.blocks-loop(1, tablet, @width-tablet, @padding-tablet);
.blocks-loop(1, desktop, @width-desktop, @padding-desktop);
.blocks-loop(1, hd, @width-hd, @padding-hd);