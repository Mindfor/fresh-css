@import "variables.less";
@import "grid.less";

// Mixins
.blocks {
	.row;
	list-style: none;
	padding: 0;
	
	> * {
		text-align: center;
	}
}

.blocks(@num, @spacing: @blocks-spacing) {
	&:extend(.blocks all);
	margin-left: -@spacing;
	
	> * {
		width: calc(percentage(1 / @num) ~" - " @spacing);
		margin-left: @spacing;
		margin-bottom: @spacing;
	}
}

.blocks(@num, @min-width, @spacing) {
	&:extend(.blocks all);
	
	@media (min-width: @min-width) {
		margin-left: -@spacing;
		
		> * {
			width: calc(percentage(1 / @num) ~" - " @spacing);
			margin-left: @spacing;
			margin-bottom: @spacing;
		}
	}
}

.blocks-sm(@num) {
	.blocks(@min, @width-sm, @blocks-spacing);
}

.blocks-md(@num) {
	.blocks(@min, @width-md, @blocks-spacing);
}

.blocks-lg(@num) {
	.blocks(@min, @width-lg, @blocks-spacing);
}

.blocks-xl(@num) {
	.blocks(@min, @width-xl, @blocks-spacing);
}
.blocks-xxl(@num) {
	.blocks(@min, @width-xxl);
}

// Create default blocks in loop
.blocks-loop(@num) when (@num <= @blocks-count) {
	.blocks-@{num} {
		.blocks(@num);
	}
	.blocks-loop(@num + 1);
}

.blocks-loop(@num, @suffix, @min-width) when (@num <= @blocks-count) {
	.blocks-@{suffix}-@{num} {
		.blocks(@num, @min-width, @blocks-spacing);
	}
	.blocks-loop(@num + 1, @suffix, @min-width);
}

.blocks-loop(1);
.blocks-loop(1, sm, @width-sm);
.blocks-loop(1, md, @width-md);
.blocks-loop(1, lg, @width-lg);
.blocks-loop(1, xl, @width-xl);
.blocks-loop(1, xxl, @width-xxl);